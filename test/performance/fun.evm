.code:
  PUSH1 0x60		contract fun is derived {...
  PUSH1 0x40		contract fun is derived {...
  MSTORE			contract fun is derived {...
tag1: 
  JUMPDEST		function fun() {...
  PUSH [tag3]		test()
  PUSH [tag4]		test
  JUMP	[in]		test()
tag3: 
  JUMPDEST		test()
tag2: 
  JUMPDEST		function fun() {...
  PUSH #[$00000000…00000000]		contract fun is derived {...
  DUP1			contract fun is derived {...
  PUSH [$00000000…00000000]		contract fun is derived {...
  PUSH1 0x0		contract fun is derived {...
  CODECOPY			contract fun is derived {...
  PUSH1 0x0		contract fun is derived {...
  RETURN			contract fun is derived {...
tag4: 
  JUMPDEST		function test() {...
  PUSH1 0x0		uint u
  PUSH1 0x0		int i
  PUSH1 0x8		8
  SWAP2			uint u = 8
  POP			uint u = 8
  PUSH1 0x0		0
  SWAP1			int i = 0
  POP			int i = 0
tag6: 
  JUMPDEST		for (int i = 0; i < 2000000; ++i)...
  PUSH3 0x1E8480		2000000
  DUP2			i
  SLT			i < 2000000
  ISZERO			for (int i = 0; i < 2000000; ++i)...
  PUSH [tag7]		for (int i = 0; i < 2000000; ++i)...
  JUMPI			for (int i = 0; i < 2000000; ++i)...
  PUSH [tag9]		nada(u)
  DUP3			u
  PUSH [tag10]		nada
  JUMP	[in]		nada(u)
tag9: 
  JUMPDEST		nada(u)
  SWAP2			u = nada(u)
  POP			u = nada(u)
  DUP2			u = nada(u)
  POP			u = nada(u)
tag8: 
  JUMPDEST		for (int i = 0; i < 2000000; ++i)...
  DUP1			++i
  PUSH1 0x1		++i
  ADD			++i
  SWAP1			++i
  POP			++i
  DUP1			++i
  POP			++i
  PUSH [tag6]		for (int i = 0; i < 2000000; ++i)...
  JUMP			for (int i = 0; i < 2000000; ++i)...
tag7: 
  JUMPDEST		for (int i = 0; i < 2000000; ++i)...
  PUSH1 0x8		8
  DUP3			u
  EQ			u != 8
  ISZERO			u != 8
  ISZERO			if (u != 8)...
  PUSH [tag11]		if (u != 8)...
  JUMPI			if (u != 8)...
  PUSH [ErrorTag]		throw
  JUMP			throw
tag11: 
  JUMPDEST		if (u != 8)...
tag5: 
  JUMPDEST		function test() {...
  POP			function test() {...
  POP			function test() {...
  JUMP	[out]		function test() {...
tag10: 
  JUMPDEST		function nada(uint u) internal returns (uint) {...
  PUSH1 0x0		uint
  PUSH [tag13]		base.nada(u)
  DUP3			u
  PUSH [tag14]		base.nada
  JUMP	[in]		base.nada(u)
tag13: 
  JUMPDEST		base.nada(u)
  SWAP1			return base.nada(u)
  POP			return base.nada(u)
  PUSH [tag12]		return base.nada(u)
  JUMP			return base.nada(u)
tag12: 
  JUMPDEST		function nada(uint u) internal returns (uint) {...
  SWAP2			function nada(uint u) internal returns (uint) {...
  SWAP1			function nada(uint u) internal returns (uint) {...
  POP			function nada(uint u) internal returns (uint) {...
  JUMP	[out]		function nada(uint u) internal returns (uint) {...
tag14: 
  JUMPDEST		function nada(uint u) internal returns (uint) {...
  PUSH1 0x0		uint
  DUP2			u
  SWAP1			return u
  POP			return u
  PUSH [tag15]		return u
  JUMP			return u
tag15: 
  JUMPDEST		function nada(uint u) internal returns (uint) {...
  SWAP2			function nada(uint u) internal returns (uint) {...
  SWAP1			function nada(uint u) internal returns (uint) {...
  POP			function nada(uint u) internal returns (uint) {...
  JUMP	[out]		function nada(uint u) internal returns (uint) {...
.data:
  0: 
  .code:
    PUSH1 0x60		contract fun is derived {...
    PUSH1 0x40		contract fun is derived {...
    MSTORE			contract fun is derived {...
    PUSH1 0x0		contract fun is derived {...
    CALLDATALOAD			contract fun is derived {...
    PUSH29 0x100000000000000000000000000000000000000000000000000000000		contract fun is derived {...
    SWAP1			contract fun is derived {...
    DIV			contract fun is derived {...
    DUP1			contract fun is derived {...
    PUSH4 0x164CE703		contract fun is derived {...
    EQ			contract fun is derived {...
    PUSH [tag2]		contract fun is derived {...
    JUMPI			contract fun is derived {...
    DUP1			contract fun is derived {...
    PUSH4 0xF8A8FD6D		contract fun is derived {...
    EQ			contract fun is derived {...
    PUSH [tag3]		contract fun is derived {...
    JUMPI			contract fun is derived {...
    PUSH [tag1]		contract fun is derived {...
    JUMP			contract fun is derived {...
  tag1: 
    JUMPDEST		contract fun is derived {...
    PUSH [ErrorTag]		contract fun is derived {...
    JUMP			contract fun is derived {...
  tag2: 
    JUMPDEST		function useless(uint u) returns (uint) {...
    CALLVALUE			function useless(uint u) returns (uint) {...
    PUSH [ErrorTag]		function useless(uint u) returns (uint) {...
    JUMPI			function useless(uint u) returns (uint) {...
    PUSH [tag4]		function useless(uint u) returns (uint) {...
    PUSH1 0x4		function useless(uint u) returns (uint) {...
    DUP1			function useless(uint u) returns (uint) {...
    DUP1			function useless(uint u) returns (uint) {...
    CALLDATALOAD			function useless(uint u) returns (uint) {...
    SWAP1			function useless(uint u) returns (uint) {...
    PUSH1 0x20		function useless(uint u) returns (uint) {...
    ADD			function useless(uint u) returns (uint) {...
    SWAP1			function useless(uint u) returns (uint) {...
    SWAP2			function useless(uint u) returns (uint) {...
    SWAP1			function useless(uint u) returns (uint) {...
    POP			function useless(uint u) returns (uint) {...
    POP			function useless(uint u) returns (uint) {...
    PUSH [tag5]		function useless(uint u) returns (uint) {...
    JUMP			function useless(uint u) returns (uint) {...
  tag4: 
    JUMPDEST		function useless(uint u) returns (uint) {...
    PUSH1 0x40		function useless(uint u) returns (uint) {...
    MLOAD			function useless(uint u) returns (uint) {...
    DUP1			function useless(uint u) returns (uint) {...
    DUP3			function useless(uint u) returns (uint) {...
    DUP2			function useless(uint u) returns (uint) {...
    MSTORE			function useless(uint u) returns (uint) {...
    PUSH1 0x20		function useless(uint u) returns (uint) {...
    ADD			function useless(uint u) returns (uint) {...
    SWAP2			function useless(uint u) returns (uint) {...
    POP			function useless(uint u) returns (uint) {...
    POP			function useless(uint u) returns (uint) {...
    PUSH1 0x40		function useless(uint u) returns (uint) {...
    MLOAD			function useless(uint u) returns (uint) {...
    DUP1			function useless(uint u) returns (uint) {...
    SWAP2			function useless(uint u) returns (uint) {...
    SUB			function useless(uint u) returns (uint) {...
    SWAP1			function useless(uint u) returns (uint) {...
    RETURN			function useless(uint u) returns (uint) {...
  tag3: 
    JUMPDEST		function test() {...
    CALLVALUE			function test() {...
    PUSH [ErrorTag]		function test() {...
    JUMPI			function test() {...
    PUSH [tag6]		function test() {...
    PUSH1 0x4		function test() {...
    DUP1			function test() {...
    POP			function test() {...
    POP			function test() {...
    PUSH [tag7]		function test() {...
    JUMP			function test() {...
  tag6: 
    JUMPDEST		function test() {...
    STOP			function test() {...
  tag5: 
    JUMPDEST		function useless(uint u) returns (uint) {...
    PUSH1 0x0		uint
    PUSH [tag9]		nada(u)
    DUP3			u
    PUSH [tag10]		nada
    JUMP	[in]		nada(u)
  tag9: 
    JUMPDEST		nada(u)
    SWAP1			return nada(u)
    POP			return nada(u)
    PUSH [tag8]		return nada(u)
    JUMP			return nada(u)
  tag8: 
    JUMPDEST		function useless(uint u) returns (uint) {...
    SWAP2			function useless(uint u) returns (uint) {...
    SWAP1			function useless(uint u) returns (uint) {...
    POP			function useless(uint u) returns (uint) {...
    JUMP	[out]		function useless(uint u) returns (uint) {...
  tag7: 
    JUMPDEST		function test() {...
    PUSH1 0x0		uint u
    PUSH1 0x0		int i
    PUSH1 0x8		8
    SWAP2			uint u = 8
    POP			uint u = 8
    PUSH1 0x0		0
    SWAP1			int i = 0
    POP			int i = 0
  tag12: 
    JUMPDEST		for (int i = 0; i < 2000000; ++i)...
    PUSH3 0x1E8480		2000000
    DUP2			i
    SLT			i < 2000000
    ISZERO			for (int i = 0; i < 2000000; ++i)...
    PUSH [tag13]		for (int i = 0; i < 2000000; ++i)...
    JUMPI			for (int i = 0; i < 2000000; ++i)...
    PUSH [tag15]		nada(u)
    DUP3			u
    PUSH [tag10]		nada
    JUMP	[in]		nada(u)
  tag15: 
    JUMPDEST		nada(u)
    SWAP2			u = nada(u)
    POP			u = nada(u)
    DUP2			u = nada(u)
    POP			u = nada(u)
  tag14: 
    JUMPDEST		for (int i = 0; i < 2000000; ++i)...
    DUP1			++i
    PUSH1 0x1		++i
    ADD			++i
    SWAP1			++i
    POP			++i
    DUP1			++i
    POP			++i
    PUSH [tag12]		for (int i = 0; i < 2000000; ++i)...
    JUMP			for (int i = 0; i < 2000000; ++i)...
  tag13: 
    JUMPDEST		for (int i = 0; i < 2000000; ++i)...
    PUSH1 0x8		8
    DUP3			u
    EQ			u != 8
    ISZERO			u != 8
    ISZERO			if (u != 8)...
    PUSH [tag16]		if (u != 8)...
    JUMPI			if (u != 8)...
    PUSH [ErrorTag]		throw
    JUMP			throw
  tag16: 
    JUMPDEST		if (u != 8)...
  tag11: 
    JUMPDEST		function test() {...
    POP			function test() {...
    POP			function test() {...
    JUMP	[out]		function test() {...
  tag10: 
    JUMPDEST		function nada(uint u) internal returns (uint) {...
    PUSH1 0x0		uint
    PUSH [tag18]		base.nada(u)
    DUP3			u
    PUSH [tag19]		base.nada
    JUMP	[in]		base.nada(u)
  tag18: 
    JUMPDEST		base.nada(u)
    SWAP1			return base.nada(u)
    POP			return base.nada(u)
    PUSH [tag17]		return base.nada(u)
    JUMP			return base.nada(u)
  tag17: 
    JUMPDEST		function nada(uint u) internal returns (uint) {...
    SWAP2			function nada(uint u) internal returns (uint) {...
    SWAP1			function nada(uint u) internal returns (uint) {...
    POP			function nada(uint u) internal returns (uint) {...
    JUMP	[out]		function nada(uint u) internal returns (uint) {...
  tag19: 
    JUMPDEST		function nada(uint u) internal returns (uint) {...
    PUSH1 0x0		uint
    DUP2			u
    SWAP1			return u
    POP			return u
    PUSH [tag20]		return u
    JUMP			return u
  tag20: 
    JUMPDEST		function nada(uint u) internal returns (uint) {...
    SWAP2			function nada(uint u) internal returns (uint) {...
    SWAP1			function nada(uint u) internal returns (uint) {...
    POP			function nada(uint u) internal returns (uint) {...
    JUMP	[out]		function nada(uint u) internal returns (uint) {...
